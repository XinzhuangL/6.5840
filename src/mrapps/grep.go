package main

import (
	"6.5840/mr"
	"log"
	"strconv"
	"strings"
)
import "regexp"

var pattern = regexp.MustCompile("Algernon")

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// split to line
	lines := strings.Split(contents, "\n")

	kva := []mr.KeyValue{}
	for _, line := range lines {

		matches := pattern.FindAllString(line, -1)
		if len(matches) <= 0 {
			continue
		}
		kv := mr.KeyValue{line, "1"}
		log.Printf("mr current key: %s", line)
		kva = append(kva, kv)
	}
	return kva
}

// The reduce functon is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	value := strconv.Itoa(len(values))
	// return the number of occurrences of this word
	log.Printf("current key: %s, value: %s", key, value)
	return value
}
